
<div id="freighter-wrap" aria-live="polite">
  <button id="mint" aria-controls="freighter-wrap">Mint</button>
</div>
<div id="errormint"></div>
<style>
  div {
    line-height: 2.7rem;
    margin: auto;
    overflow: hidden;
    text-overflow: ellipsis;
    text-align: center;
    white-space: nowrap;
  }
button {
    font-size: 2rem;
    border-radius: 1rem;
    border: 1px solid black;
    padding: 1rem;
    text-align: center;
    display: block;
    width: 5ch;
    margin: auto;
    margin-top: 2rem;
    color: white;
    background-color: black;
    cursor: pointer;
    box-shadow: 0 0 5px 0 rgba(0, 0, 0, 0.25) inset, 0 5px 10px 5px rgba(0, 0, 0, 0.25);

    transition: width 0.1s linear;
  }
</style>
<script>
  import {Contract, networks} from 'Million';
  import * as wallet from '@stellar/freighter-api';
  import {xdr} from 'soroban-client';
  const million = new Contract({
    ...networks.localnet,
    rpcUrl: 'http://localhost:8000/soroban/rpc',
    wallet: wallet,
  })
  const button = document.querySelector("#mint");
  button.addEventListener('click', async () => {
    if (!(await wallet.isAllowed())) {
      await wallet.setAllowed();
    }
    try {
      const { publicKey } = await wallet.getUserInfo();
      console.log(publicKey)
      let retry = 3;
      while (retry > 0) {
        retry--;
        let x = Math.floor(Math.random() * 128);
        let y = Math.floor(Math.random() * 32);
        let result = await million.mint({to: publicKey, x: x, y: y}, {fee: 50000000, responseType: "full", wallet: wallet});
        console.log(result)
        if (result.status == "SUCCESS") {
          console.log(result)
          //let rvalue = xdr.TransactionMeta.fromXDR(result.resultMetaXdr, 'base64').v3().sorobanMeta().returnValue().u32();
          let rvalue = result.returnValue.u32();
          let result2 = await million.tokenUri({token_id: rvalue}, {responseType: "simulated", fee: 1000000, wallet: wallet});
          console.log(result2)
          if (result2.result) {
            let uri = result2.result.retval.str().toString()
            console.log(uri)
            let jsonResponse = await fetch(uri);
            let jsonData = await jsonResponse.json();

            window.location = jsonData.home_page;
          }
        }
        console.log("Error", result);
      }
      if (retry == 0) {
        document.querySelector("#errormint").innerHTML = e;
      }
    } catch (e) {
      console.log(e)
      document.querySelector("#errormint").innerHTML = e;
    }
  });
  button.addEventListener('mouseenter', async () =>  {
    button.addEventListener("transitionend", async () => {

      button.innerHTML = '256XLM â‡‹ 256px';
    }, {once: true});
    button.style.width = "20ch";
  })
  button.addEventListener('mouseleave', async () =>  {
    button.innerHTML = 'Mint';
    button.style.width = "5ch";
  })
</script>
